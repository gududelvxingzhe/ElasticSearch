server:  port: 8080


spring:  datasource:    # 可自动识别    driver-class-name: com.mysql.jdbc.Driver    username: root    password: root    type: com.alibaba.druid.pool.DruidDataSource    url: jdbc:mysql://192.168.2.154:3306/sms?useSSL=false    # DataSource配置    druid:      # 初始容量      initial-size: 10      # 最大连接池个数      max-active: 20      # 最小空闲      min-idle: 10      # 获取连接最大等待时间      max-wait: 3000      # 是否缓存preparedStatement(PSCache),对游标提升巨大,建议oracle开启,mysql关闭      pool-prepared-statements: false      # 启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100      max-pool-prepared-statement-per-connection-size: 0      # 检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。      validation-query: select 'x'      # 检测连接是否有效的超时时间。秒,底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法      validation-query-timeout: 30      # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。      test-on-borrow: false      # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。      test-on-return: false      # 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。      test-while-idle: true      # 驱逐策略间隔,如果连接空闲时间大于minEvictableIdleTimeMillis,则关闭      time-between-eviction-runs-millis: 60000      # 在池中的最小生存时间      min-evictable-idle-time-millis: 30000      # 在池中的最大生存时间      max-evictable-idle-time-millis: 600000      # 连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作。      keep-alive: true      # 连接初始化时,执行的sql      connection-init-sqls:      # 开启的过滤器,常用的有  监控统计:stat  日志:log4j 防御sql注入:wall      filters: stat,wall,log4j      # 合并多个dataSource的监控记录      use-global-data-source-stat: true# Redis数据库索引（默认为0）  redis:     database: 0# 连接超时时间（毫秒）    timeout: 0# Redis服务器地址    host: 192.168.2.91# Redis服务器连接端口    port: 6379# Redis服务器连接密码（默认为空）    password:# 连接池最大连接数（使用负值表示没有限制）    pool:      max-active: 8# 连接池最大阻塞等待时间（使用负值表示没有限制）      max-wait: -1# 连接池中的最大空闲连接      max-idle: 8# 连接池中的最小空闲连接      min-idle: 0                        
      